{"mappings":"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","sources":["public/node_modules/lottiefiles/lottie-interactivity/dist/lottie-interactivity.min.js","public/node_modules/lottiefiles/lottie-interactivity/src/lottie-interactivity.js"],"sourcesContent":[null,"const DEFAULT_OPTIONS = {\n  player: 'lottie-player',\n};\nconst LOTTIE_PLAYER_NODE = 'LOTTIE-PLAYER';\nconst ERROR_PREFIX = '[lottieInteractivity]:';\n\n/**\n * LottieFiles interactivity for Lottie\n */\nexport class LottieInteractivity {\n  constructor({ actions, container, mode, player, ...options } = DEFAULT_OPTIONS) {\n    // Save the original player entered by user, used for interaction chaining / loading animations on the fly\n    this.enteredPlayer = player;\n\n    // Resolve lottie instance specified in player option\n    if (!(typeof player === 'object' && player.constructor.name === 'AnimationItem')) {\n      if (typeof player === 'string') {\n        const elem = document.querySelector(player);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          player = elem.getLottie();\n        }\n      } else if (player instanceof HTMLElement && player.nodeName === LOTTIE_PLAYER_NODE) {\n        player = player.getLottie();\n      }\n\n      // Throw error no player instance has been successfully resolved\n      if (!player) {\n        let message = ERROR_PREFIX + \"Specified player:\" + player + \" is invalid.\";\n\n        throw new Error(message);\n      }\n    }\n\n    // Get the configured container element.\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    // Use player wrapper as fallback if container couldn't be resolved.\n    if (!container) {\n      container = player.wrapper;\n    }\n\n    this.player = player;\n    this.loadedAnimation = this.player.path + this.player.fileName + \".json\";\n    this.attachedListeners = false;\n    this.container = container;\n    this.mode = mode;\n    this.actions = actions;\n    this.options = options;\n    this.assignedSegment = null;\n    this.scrolledAndPlayed = false;\n\n    // Interaction chaining\n    this.interactionIdx = 0;\n    this.oldInterctionIdx = 0;\n    this.clickCounter = 0;\n    this.playCounter = 0;\n    this.stateHandler = new Map();\n    this.transitionHandler = new Map();\n  }\n\n  getContainerVisibility() {\n    // Get the bounding box for the lottie player or container\n    const { top, height } = this.container.getBoundingClientRect();\n\n    // Calculate current view percentage\n    const current = window.innerHeight - top;\n    const max = window.innerHeight + height;\n    return current / max;\n  }\n\n  getContainerCursorPosition(cursorX, cursorY) {\n    const { top, left, width, height } = this.container.getBoundingClientRect();\n\n    const x = (cursorX - left) / width;\n    const y = (cursorY - top) / height;\n\n    return { x, y };\n  }\n\n  initScrollMode() {\n    this.player.stop();\n    window.addEventListener('scroll', this.#scrollHandler, true);\n  }\n\n  initCursorMode() {\n    // To have click and hover interaction, force to only have that type and single action\n    // If there are multiple actions, click and hover are ignored\n    if (this.actions &&\n      this.actions.length === 1) {\n      if (this.actions[0].type === \"click\") {\n        this.player.loop = false;\n        this.player.stop();\n        this.container.addEventListener('click', this.#clickHoverHandler);\n      } else if (this.actions[0].type === \"hover\") {\n        this.player.loop = false;\n        this.player.stop();\n        this.container.addEventListener('mouseenter', this.#clickHoverHandler);\n\n        // For mobile\n        this.container.addEventListener('touchstart', this.#clickHoverHandler, { passive: true });\n      } else if (this.actions[0].type === \"toggle\") {\n        this.player.loop = false;\n        this.player.stop();\n        this.container.addEventListener('click', this.#toggleHandler);\n      } else if (this.actions[0].type === \"hold\" || this.actions[0].type === \"pauseHold\") {\n        this.container.addEventListener('mouseenter', this.#holdTransitionEnter);\n        this.container.addEventListener('mouseleave', this.#holdTransitionLeave);\n\n        // For mobile\n        this.container.addEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n        this.container.addEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n\n      } else if (this.actions[0].type === \"seek\") {\n        this.player.loop = true;\n        this.player.stop();\n        this.container.addEventListener('mousemove', this.#mousemoveHandler);\n        // For mobile\n        this.container.addEventListener('touchmove', this.#touchmoveHandler, { passive: false });\n        this.container.addEventListener('mouseout', this.#mouseoutHandler);\n      }\n    } else {\n      this.player.loop = true;\n      this.player.stop();\n      this.container.addEventListener('mousemove', this.#mousemoveHandler);\n      this.container.addEventListener('mouseleave', this.#mouseoutHandler);\n\n      // Init the animations that set states when the cursor is outside the container, so that they\n      // are visibly idle at the desired frame before first interaction with them\n      this.#cursorHandler(-1, -1);\n    }\n  }\n\n  initChainMode() {\n    this.#initInteractionMaps();\n    this.player.loop = false;\n    this.player.stop();\n    this.#chainedInteractionHandler({ ignorePath: false });\n  }\n\n  start() {\n    if (this.mode === 'scroll') {\n      if (this.player.isLoaded) {\n        this.initScrollMode();\n      } else {\n        this.player.addEventListener('DOMLoaded', () => {\n          this.initScrollMode();\n        });\n      }\n    } else if (this.mode === 'cursor') {\n      if (this.player.isLoaded) {\n        this.initCursorMode();\n      } else {\n        this.player.addEventListener('DOMLoaded', () => {\n          this.initCursorMode();\n        });\n      }\n    } else if (this.mode === 'chain') {\n      // When passing animation object to LI the player is already loaded\n      if (this.player.isLoaded) {\n        this.initChainMode();\n      } else {\n        this.player.addEventListener('DOMLoaded', () => {\n          this.initChainMode();\n        });\n      }\n    }\n  }\n\n  redefineOptions({ actions, container, mode, player, ...options }) {\n    this.stop();\n\n    // Save the original player entered by user, used for interaction chaining / loading animations on the fly\n    this.enteredPlayer = player;\n\n    // Resolve lottie instance specified in player option\n    if (!(typeof player === 'object' && player.constructor.name === 'AnimationItem')) {\n      if (typeof player === 'string') {\n        const elem = document.querySelector(player);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          player = elem.getLottie();\n        }\n      } else if (player instanceof HTMLElement && player.nodeName === LOTTIE_PLAYER_NODE) {\n        player = player.getLottie();\n      }\n\n      // Throw error no player instance has been successfully resolved\n      if (!player) {\n        let message = ERROR_PREFIX + \"Specified player:\" + player + \" is invalid.\";\n\n        throw new Error(message, player);\n      }\n    }\n\n    // Get the configured container element.\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    // Use player wrapper as fallback if container couldn't be resolved.\n    if (!container) {\n      container = player.wrapper;\n    }\n\n    this.player = player;\n    this.loadedAnimation = this.player.path + this.player.fileName + \".json\";\n    this.attachedListeners = false;\n    this.container = container;\n    this.mode = mode;\n    this.actions = actions;\n    this.options = options;\n    this.assignedSegment = null;\n    this.scrolledAndPlayed = false;\n\n    // Interaction chaining\n    this.interactionIdx = 0;\n    this.clickCounter = 0;\n    this.playCounter = 0;\n    this.holdStatus = null;\n    this.stateHandler = new Map();\n    this.transitionHandler = new Map();\n\n    this.start();\n  }\n\n  stop() {\n    if (this.mode === 'scroll') {\n      window.removeEventListener('scroll', this.#scrollHandler, true);\n    }\n\n    if (this.mode === 'cursor') {\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('click', this.#toggleHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      this.container.removeEventListener('touchstart', this.#clickHoverHandler);\n      this.container.removeEventListener('touchmove', this.#touchmoveHandler);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseleave', this.#mouseoutHandler);\n      this.container.removeEventListener('touchstart', this.#holdTransitionEnter);\n      this.container.removeEventListener('touchend', this.#holdTransitionLeave);\n    }\n\n    if (this.mode === 'chain') {\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('click', this.#clickHoverStateHandler);\n\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      this.container.removeEventListener('touchstart', this.#clickHoverHandler);\n      this.container.removeEventListener('touchmove', this.#touchmoveHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverStateHandler);\n      this.container.removeEventListener('touchstart', this.#clickHoverStateHandler);\n      this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.removeEventListener('touchstart', this.#holdTransitionEnter);\n\n      this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n      this.container.removeEventListener('touchend', this.#holdTransitionLeave);\n\n      if (this.player) {\n        try {\n          this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n          this.player.removeEventListener('complete', this.#onCompleteHandler);\n          this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n          this.player.removeEventListener('enterFrame', this.#holdHandler);\n        } catch (e) {\n          // User deleted the player before calling stop()\n          // Ignore\n        }\n      }\n    }\n    if (this.player) {\n      this.player.destroy();\n      this.player = null;\n    }\n  }\n\n  /**\n   * [chain mode]\n   * Init the state and transitions maps containing all the state and transition methods used for interaction chaining\n   */\n  #initInteractionMaps = () => {\n    if (!this.player)\n      return;\n\n    let loopState = () => {\n      if (this.actions[this.interactionIdx].loop) {\n        this.player.loop = parseInt(this.actions[this.interactionIdx].loop) - 1;\n      } else {\n        this.player.loop = true;\n      }\n      this.player.autoplay = true;\n    }\n    let autoplayState = () => {\n      this.player.loop = false;\n      this.player.autoplay = true;\n    }\n    let clickState = () => {\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.container.addEventListener('click', this.#clickHoverStateHandler);\n    }\n    let hoverState = () => {\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.container.addEventListener('mouseenter', this.#clickHoverStateHandler);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#clickHoverStateHandler, { passive: true });\n    }\n    let clickTransition = () => {\n      this.container.addEventListener('click', this.#clickHoverHandler);\n    }\n    let hoverTransition = () => {\n      this.container.addEventListener('mouseenter', this.#clickHoverHandler);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#clickHoverHandler, { passive: true });\n    }\n    let holdTransition = () => {\n      this.player.addEventListener('enterFrame', this.#holdHandler);\n      this.container.addEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.addEventListener('mouseleave', this.#holdTransitionLeave);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n      this.container.addEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n    }\n    let holdState = () => {\n      this.container.addEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.addEventListener('mouseleave', this.#holdTransitionLeave);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n      this.container.addEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n    }\n    let repeatTransition = () => {\n      this.player.loop = true;\n      this.player.autoplay = true;\n      let handler = () => { this.#repeatTransition({ handler }) };\n      this.player.addEventListener('loopComplete', handler);\n    }\n    let onCompleteTransition = () => {\n      let state = this.actions[this.interactionIdx].state;\n\n      if (state === 'loop')\n        this.player.addEventListener('loopComplete', this.#onCompleteHandler);\n      else\n        this.player.addEventListener('complete', this.#onCompleteHandler);\n    }\n    let cursorSyncTransition = () => {\n      this.player.stop();\n      this.player.addEventListener('enterFrame', this.#cursorSyncHandler);\n      this.container.addEventListener('mousemove', this.#mousemoveHandler);\n      this.container.addEventListener('touchmove', this.#touchmoveHandler, { passive: false });\n      this.container.addEventListener('mouseout', this.#mouseoutHandler);\n    }\n    this.stateHandler.set('loop', loopState);\n    this.stateHandler.set('autoplay', autoplayState);\n    this.stateHandler.set('click', clickState);\n    this.stateHandler.set('hover', hoverState);\n    this.stateHandler.set('hold', holdState);\n    this.stateHandler.set('pauseHold', holdState);\n\n    this.transitionHandler.set('click', clickTransition);\n    this.transitionHandler.set('hover', hoverTransition);\n    this.transitionHandler.set('hold', holdTransition);\n    this.transitionHandler.set('pauseHold', holdTransition);\n    this.transitionHandler.set('repeat', repeatTransition);\n    this.transitionHandler.set('onComplete', onCompleteTransition);\n    this.transitionHandler.set('seek', cursorSyncTransition);\n  }\n\n  /**\n   * [chain mode]\n   * Handle hover state on chained interactions\n   */\n  #clickHoverStateHandler = () => {\n    let forceFlag = this.actions[this.interactionIdx].forceFlag;\n\n    if (!forceFlag && this.player.isPaused === true) {\n      this.#playSegmentHandler(true);\n    } else if (forceFlag) {\n      this.#playSegmentHandler(true);\n    }\n  }\n\n  // [cursor mode]\n  #toggleHandler = () => {\n    if (this.clickCounter === 0) {\n      this.player.play();\n      this.clickCounter++;\n    } else {\n      this.clickCounter++;\n      this.player.setDirection(this.player.playDirection * -1);\n      this.player.play();\n    }\n  }\n\n  /**\n   * [cursor + chain mode]\n   * Handle click and hover in both cursor and chain mode\n   */\n  #clickHoverHandler = () => {\n    let forceFlag = this.actions[this.interactionIdx].forceFlag;\n    let state = this.actions[this.interactionIdx].state;\n    let transition = this.actions[this.interactionIdx].transition;\n\n    // If we're in chain mode and the click or hover transition is used, otherwise just play the animation\n    if (this.mode === 'chain') {\n      // Check if there is a counter or not and make a transition\n      if (this.actions[this.interactionIdx].count) {\n        let clickLimit = parseInt(this.actions[this.interactionIdx].count);\n        if (this.clickCounter < clickLimit - 1) {\n          this.clickCounter += 1;\n          return;\n        }\n      }\n      // No click counter, so we remove the listeners and got to next interaction\n      this.clickCounter = 0;\n      // Transition when the animation has finished playing\n      if (!forceFlag && (transition === \"click\" && state === \"click\") || (transition === \"hover\" && state === \"hover\"))\n        this.transitionHandler.get(\"onComplete\").call();\n      else\n        this.nextInteraction();\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      return;\n    }\n    // Using goToAndPlay rather than this.#playSegmentHandler(forceFlag) because we're in cursor mode\n    // there for we want to play from the beginning\n    if (!forceFlag && this.player.isPaused === true) {\n      this.player.goToAndPlay(0, true);\n    } else if (forceFlag) {\n      this.player.goToAndPlay(0, true);\n    }\n  }\n\n  // [cursor mode]\n  #mousemoveHandler = e => {\n    this.#cursorHandler(e.clientX, e.clientY);\n  };\n\n  // [cursor mode]\n  #touchmoveHandler = e => {\n    // Allows for syncing on Y axis without scrolling the page\n    if (e.cancelable)\n      e.preventDefault();\n    this.#cursorHandler(e.touches[0].clientX, e.touches[0].clientY);\n  };\n\n  // [cursor mode]\n  #mouseoutHandler = () => {\n    this.#cursorHandler(-1, -1);\n  };\n\n\n  /**\n   * [chain mode]\n   * Handle when a segment of the animation has finished playing\n   */\n  #onCompleteHandler = () => {\n    if (this.actions[this.interactionIdx].state === 'loop') {\n      this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n    } else {\n      this.player.removeEventListener('complete', this.#onCompleteHandler);\n    }\n    this.nextInteraction();\n  }\n\n  // [chain mode]\n  #repeatTransition = ({ handler }) => {\n    let repeatAmount = 1;\n\n    if (this.actions[this.interactionIdx].repeat)\n      repeatAmount = this.actions[this.interactionIdx].repeat;\n    if (this.playCounter >= repeatAmount - 1) {\n      this.playCounter = 0;\n      this.player.removeEventListener('loopComplete', handler);\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.nextInteraction();\n    } else {\n      this.playCounter += 1;\n    }\n  }\n\n  /**\n   * [chain mode]\n   * TODO: How does this work with markers? Get marker duration?\n   */\n  #cursorSyncHandler = () => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    if (frames && this.player.currentFrame >= parseInt(frames[1]) - 1) {\n      this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n      setTimeout(this.nextInteraction, 0);\n    }\n  }\n\n  /**\n   * [chain mode]\n   * TODO: How does this work with markers? Get marker duration?\n   *\n   * With the hold transition we can't use playSegment so we have to manually verify if\n   * The user held long enough and check if the current frame is within the segment limits\n   *\n   */\n  #holdHandler = () => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    if ((frames && this.player.currentFrame >= frames[1]) || (this.player.currentFrame >= this.player.totalFrames - 1)) {\n      this.player.removeEventListener('enterFrame', this.#holdHandler);\n      this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n      // For mobile\n      this.container.removeEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n      this.container.removeEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n      this.player.pause();\n\n      this.holdStatus = false;\n      this.nextInteraction();\n    }\n    // Pause player so that reverse playback doesn't leave the set frame boundries\n    if (this.player.playDirection === -1 && frames && this.player.currentFrame < frames[0]) {\n      this.player.pause();\n    }\n  }\n\n  // [cursor + chain mode]\n  #holdTransitionEnter = () => {\n    // On first cursor enter needs check\n    if (this.player.playDirection === -1 || this.holdStatus === null || !this.holdStatus) {\n      this.player.setDirection(1);\n      this.player.play();\n      this.holdStatus = true;\n    }\n  }\n\n  // [cursor + chain mode]\n  #holdTransitionLeave = () => {\n    if (this.actions[this.interactionIdx].transition === \"hold\" ||\n      this.actions[this.interactionIdx].state === \"hold\" ||\n      this.actions[0].type === \"hold\") {\n      this.player.setDirection(-1);\n      this.player.play();\n    } else if (this.actions[this.interactionIdx].transition === \"pauseHold\" ||\n      this.actions[this.interactionIdx].state === \"pauseHold\" ||\n      this.actions[0].type === \"pauseHold\") {\n      this.player.pause();\n    }\n    this.holdStatus = false;\n  }\n\n  // [chain mode]\n  #clearStateListeners = () => {\n    this.container.removeEventListener('click', this.#clickHoverHandler);\n    this.container.removeEventListener('click', this.#clickHoverStateHandler);\n\n    this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n    this.container.removeEventListener('touchstart', this.#clickHoverHandler);\n    this.container.removeEventListener('touchmove', this.#touchmoveHandler);\n    this.container.removeEventListener('mouseenter', this.#clickHoverStateHandler);\n    this.container.removeEventListener('touchstart', this.#clickHoverStateHandler);\n    this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n    this.container.removeEventListener('touchstart', this.#holdTransitionEnter);\n\n    this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n    this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n    this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n    this.container.removeEventListener('touchend', this.#holdTransitionLeave);\n\n    if (this.player) {\n      try {\n        this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n        this.player.removeEventListener('complete', this.#onCompleteHandler);\n        this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n        this.player.removeEventListener('enterFrame', this.#holdHandler);\n      } catch (e) {\n        // User deleted the player before calling stop()\n        // Ignore\n      }\n    }\n  }\n\n  jumpToInteraction = (index) => {\n    this.#clearStateListeners();\n    this.interactionIdx = index;\n    this.interactionIdx < 0 ? this.interactionIdx = 0 : this.interactionIdx;\n    this.nextInteraction(false);\n  }\n\n  // [chain mode]\n  nextInteraction = (incrementIndex = true) => {\n    this.oldInterctionIdx = this.interactionIdx;\n    // If state is hover or click we need to remove listeners\n    this.#clearStateListeners();\n    this.player.loop = false;\n\n    // Check if theres a jump-to before incrementing\n    let jumpToIndex = this.actions[this.interactionIdx].jumpTo;\n    if (jumpToIndex) {\n      // If jumpToIndex is inside action length jump to it otherwise go to first action\n      if (jumpToIndex >= 0 && jumpToIndex < this.actions.length) {\n        this.interactionIdx = jumpToIndex;\n        this.#chainedInteractionHandler({ ignorePath: false });\n      } else {\n        this.interactionIdx = 0;\n        this.player.goToAndStop(0, true);\n        this.#chainedInteractionHandler({ ignorePath: false });\n      }\n    } else {\n      // Go to next interaction\n      if (incrementIndex)\n        this.interactionIdx++;\n      if (this.interactionIdx >= this.actions.length) {\n        // Go back to the first interaction\n        if (this.actions[this.actions.length - 1].reset) {\n          this.interactionIdx = 0;\n          this.player.resetSegments(true);\n          if (this.actions[this.interactionIdx].frames)\n            this.player.goToAndStop(this.actions[this.interactionIdx].frames, true);\n          else\n            this.player.goToAndStop(0, true);\n          this.#chainedInteractionHandler({ ignorePath: false });\n        }\n        else {\n          this.interactionIdx = this.actions.length - 1;\n          this.#chainedInteractionHandler({ ignorePath: false });\n        }\n      } else {\n        this.#chainedInteractionHandler({ ignorePath: false });\n      }\n    }\n\n    // Emit event from the lottie-player element\n    this.container.dispatchEvent(new CustomEvent(\"transition\", {\n      bubbles: true,\n      composed: true,\n      detail: { oldIndex: this.oldInterctionIdx, newIndex: this.interactionIdx }\n    }));\n  }\n\n  /**\n   * [chain mode]\n   * Checks if frames are an array or string, and calls appropriate method to play animation\n   */\n  #playSegmentHandler = (forceFlag) => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    //If no frame segment is defined, play the whole animation\n    if (!frames) {\n      this.player.resetSegments(true);\n      this.player.goToAndPlay(0, true);\n      return;\n    }\n    // If using named markers\n    if (typeof frames === 'string') {\n      this.player.goToAndPlay(frames, forceFlag);\n    } else {\n      this.player.playSegments(frames, forceFlag);\n    }\n  }\n\n  /**\n   * [chain mode]\n   * Load a new animation using the path defined in the current interaction\n   */\n  #loadAnimationInChain = () => {\n    let path = this.actions[this.interactionIdx].path;\n\n    // The animation path declared on the lottie-player was saved in the constructor under 'enteredPlayer'\n    // We assume that the path on the lottie-player element is the animation to use in the first action\n    if (!path) {\n      // If we passed animationData to Lottie-Interactivity, load the animation data otherwise use the path\n      if (typeof this.enteredPlayer === 'object' && this.enteredPlayer.constructor.name === 'AnimationItem') {\n        path = this.enteredPlayer;\n\n        if (this.player === path) {\n          this.#chainedInteractionHandler({ ignorePath: true });\n          return;\n        }\n      } else {\n        path = this.loadedAnimation;\n        let fileName = path.substr(path.lastIndexOf('/') + 1);\n        fileName = fileName.substr(0, fileName.lastIndexOf('.json'));\n\n        // Prevents reloading animation the same animation\n        if (this.player.fileName === fileName) {\n          this.#chainedInteractionHandler({ ignorePath: true });\n          return;\n        }\n      }\n    }\n\n    // Force width and height on the container to retain its size while the next animation is being loaded\n    let lottieContainerSize = this.container.getBoundingClientRect();\n    let newContainerStyle = \"width: \" + lottieContainerSize.width + \"px !important; height: \" +\n      lottieContainerSize.height + \"px !important; background: \" + this.container.style.background;\n    this.container.setAttribute('style', newContainerStyle);\n\n    if (!(typeof this.enteredPlayer === 'object' && this.enteredPlayer.constructor.name === 'AnimationItem')) {\n      if (typeof this.enteredPlayer === 'string') {\n        const elem = document.querySelector(this.enteredPlayer);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          // Prevents adding the listeners multiple times if multiple animations are needed to be loaded from actions\n          if (!this.attachedListeners) {\n            // Remove the styling that prevents flickering\n            elem.addEventListener(\"ready\", () => {\n              this.container.style.width = '';\n              this.container.style.height = '';\n            });\n            elem.addEventListener(\"load\", () => {\n              this.player = elem.getLottie();\n              this.#chainedInteractionHandler({ ignorePath: true });\n            });\n            this.attachedListeners = true;\n          }\n          // The LottieFiles player destroys the animation when a new one is Loaded\n          elem.load(path);\n        }\n      } else if (this.enteredPlayer instanceof HTMLElement && this.enteredPlayer.nodeName === LOTTIE_PLAYER_NODE) {\n        // Prevents adding the listeners multiple times if multiple animations are needed to be loaded from actions\n        if (!this.attachedListeners) {\n          // Remove the styling that prevents flickering\n          this.enteredPlayer.addEventListener(\"ready\", () => {\n            this.container.style.width = '';\n            this.container.style.height = '';\n          });\n          this.enteredPlayer.addEventListener(\"load\", () => {\n            this.player = this.enteredPlayer.getLottie();\n            this.#chainedInteractionHandler({ ignorePath: true });\n          });\n          this.attachedListeners = true;\n        }\n        // The LottieFiles player destroys the animation when a new one is Loaded\n        this.enteredPlayer.load(path);\n      }\n      // Throw error no player instance has been successfully resolved\n      if (!this.player) {\n        throw new Error(`${ERROR_PREFIX} Specified player is invalid.`, this.enteredPlayer);\n      }\n    } else {\n      if (window.lottie) {\n        this.stop();\n        // Removes svg animation contained inside\n        this.container.innerHTML = \"\";\n\n        if (typeof path === 'object' && path.constructor.name === 'AnimationItem') {\n          this.player = window.lottie.loadAnimation({\n            loop: false,\n            autoplay: false,\n            animationData: path.animationData,\n            container: this.container\n          });\n        }\n        else {\n          this.player = window.lottie.loadAnimation({\n            loop: false,\n            autoplay: false,\n            path,\n            container: this.container\n          });\n        }\n\n        this.player.addEventListener('DOMLoaded', () => {\n          // Remove the styling that prevents flickering\n          this.container.style.width = '';\n          this.container.style.height = '';\n          this.#chainedInteractionHandler({ ignorePath: true });\n        });\n      } else {\n        throw new Error(`${ERROR_PREFIX} A Lottie player is required.`);\n      }\n    }\n    // Reset counters\n    this.clickCounter = 0;\n    this.playCounter = 0;\n  }\n\n  /**\n   * [chain mode]\n   * Check the action object at the current interaction index and set the needed interaction listeners as well\n   * as any extra options\n   */\n  #chainedInteractionHandler = ({ ignorePath }) => {\n    let frames = this.actions[this.interactionIdx].frames;\n    let state = this.actions[this.interactionIdx].state;\n    let transition = this.actions[this.interactionIdx].transition;\n    let path = this.actions[this.interactionIdx].path;\n    let stateFunction = this.stateHandler.get(state);\n    let transitionFunction = this.transitionHandler.get(transition);\n    let speed = this.actions[this.interactionIdx].speed ? this.actions[this.interactionIdx].speed : 1;\n    let delay = this.actions[this.interactionIdx].delay ? this.actions[this.interactionIdx].delay : 0;\n\n    // Check if path is detected or that we are at the beginning again and reset\n    // If we are back at the first action, we need to reload the animation declared on the lottie-player element\n    if (!ignorePath && (path || (this.actions[this.actions.length - 1].reset && this.interactionIdx === 0))) {\n      this.#loadAnimationInChain();\n      return;\n    }\n    setTimeout(() => {\n      if (frames) {\n        this.player.autoplay = false;\n        this.player.resetSegments(true);\n        this.player.goToAndStop(frames[0], true);\n      }\n      if (stateFunction) {\n        stateFunction.call();\n      } else if (state === \"none\") {\n        this.player.loop = false;\n        this.player.autoplay = false;\n      }\n      if (transitionFunction) {\n        transitionFunction.call();\n      }\n      if (this.player.autoplay) {\n        this.player.resetSegments(true);\n        this.#playSegmentHandler(true);\n      }\n      this.player.setSpeed(speed);\n    }, delay);\n  }\n\n  // [cursor mode]\n  #cursorHandler = (x, y) => {\n    // Resolve cursor position if cursor is inside container\n    if (x !== -1 && y !== -1) {\n      // Get container cursor position\n      const pos = this.getContainerCursorPosition(x, y);\n\n      // Use the resolved position\n      x = pos.x;\n      y = pos.y;\n    }\n\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(({ position }) => {\n      if (position) {\n        if (Array.isArray(position.x) && Array.isArray(position.y)) {\n          return x >= position.x[0] && x <= position.x[1] && y >= position.y[0] && y <= position.y[1];\n        } else if (!Number.isNaN(position.x) && !Number.isNaN(position.y)) {\n          return x === position.x && y === position.y;\n        }\n      }\n\n      return false;\n    });\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    // Process action types:\n    if (action.type === 'seek' || action.transition === 'seek') {\n      // Seek: Go to a frame based on player scroll position action\n      const xPercent = (x - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);\n      const yPercent = (y - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);\n\n      this.player.playSegments(action.frames, true);\n\n      if (action.position.y[0] < 0 && action.position.y[1] > 1) {\n        this.player.goToAndStop(Math.floor(xPercent * this.player.totalFrames), true);\n      } else {\n        this.player.goToAndStop(Math.ceil(((xPercent + yPercent) / 2) * this.player.totalFrames), true);\n      }\n    } else if (action.type === 'loop') {\n      this.player.playSegments(action.frames, true);\n    } else if (action.type === 'play') {\n      // Play: Reset segments and continue playing full animation from current position\n      if (this.player.isPaused === true) {\n        this.player.resetSegments();\n      }\n      this.player.playSegments(action.frames);\n    } else if (action.type === 'stop') {\n      this.player.resetSegments(true);\n      // Stop: Stop playback\n      this.player.goToAndStop(action.frames[0], true);\n    }\n  };\n\n  // [scroll mode]\n  #scrollHandler = () => {\n    // Get container visibility percentage\n    const currentPercent = this.getContainerVisibility();\n\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(\n      ({ visibility }) => currentPercent >= visibility[0] && currentPercent <= visibility[1],\n    );\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    // Process action types:\n    if (action.type === 'seek') {\n      // Seek: Go to a frame based on player scroll position action\n      const start = action.frames[0];\n      const end = action.frames.length == 2 ? action.frames[1] : (this.player.totalFrames - 1);\n\n      // Use global frame reference for frames within the seek section.\n      // Without this, if you follow a seek with a loop and then scroll back up,\n      // it will treat frame numbers as relative to the loop.\n      if (this.assignedSegment !== null) {\n        this.player.resetSegments(true);\n        this.assignedSegment = null;\n      }\n\n      this.player.goToAndStop(\n        start + Math.round(\n          ((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0])) *\n          (end - start)\n        ),\n        true,\n      );\n    } else if (action.type === 'loop') {\n      this.player.loop = true;\n      // Loop: Loop a given frames\n      if (this.assignedSegment === null) {\n        // if not playing any segments currently. play those segments and save to state\n        this.player.playSegments(action.frames, true);\n        this.assignedSegment = action.frames;\n      } else {\n        // if playing any segments currently.\n        //check if segments in state are equal to the frames selected by action\n        if (this.assignedSegment !== action.frames) {\n          // if they are not equal. new segments are to be loaded\n          this.player.playSegments(action.frames, true);\n          this.assignedSegment = action.frames;\n        } else {\n          // if they are equal the play method must be called only if lottie is paused\n          if (this.player.isPaused === true) {\n            this.player.playSegments(action.frames, true);\n            this.assignedSegment = action.frames;\n          }\n        }\n      }\n    } else if (action.type === 'play' || action.type === 'playOnce') {\n      // Play: Reset segments and continue playing full animation from current position\n      if (action.type === 'playOnce' && !this.scrolledAndPlayed) {\n        this.scrolledAndPlayed = true;\n        this.player.resetSegments(true);\n        if (action.frames) {\n          this.player.playSegments(action.frames, true);\n        } else {\n          this.player.play();\n        }\n        return;\n      } else if (action.type === 'play' && this.player.isPaused) {\n        this.player.resetSegments(true);\n        if (action.frames) {\n          this.player.playSegments(action.frames, true);\n        } else {\n          this.player.play();\n        }\n      }\n    } else if (action.type === 'stop') {\n      // Stop: Stop playback\n      this.player.goToAndStop(action.frames[0], true);\n    }\n  };\n}\n\nexport const create = options => {\n  const instance = new LottieInteractivity(options);\n  instance.start();\n\n  return instance;\n};\n\nexport default create;\n"],"names":["DEFAULT_OPTIONS","player","ERROR_PREFIX","LottieInteractivity","actions","container","mode","options","_this","holdTransition","addEventListener","passive","holdState","stateHandler","set","interactionIdx","loop","parseInt","autoplay","transitionHandler","handler","state","stop","forceFlag","isPaused","clickCounter","play","setDirection","playDirection","transition","count","clickLimit","get","call","nextInteraction","removeEventListener","goToAndPlay","e","clientX","clientY","cancelable","preventDefault","touches","repeatAmount","repeat","playCounter","frames","currentFrame","setTimeout","totalFrames","pause","holdStatus","type","index","incrementIndex","oldInterctionIdx","jumpToIndex","jumpTo","length","ignorePath","goToAndStop","reset","resetSegments","dispatchEvent","CustomEvent","bubbles","composed","detail","oldIndex","newIndex","playSegments","path","_typeof","enteredPlayer","constructor","name","fileName","loadedAnimation","substr","lastIndexOf","lottieContainerSize","getBoundingClientRect","newContainerStyle","width","height","style","background","setAttribute","elem","document","querySelector","nodeName","attachedListeners","getLottie","load","HTMLElement","Error","window","lottie","innerHTML","loadAnimation","animationData","stateFunction","transitionFunction","speed","delay","setSpeed","x","y","pos","getContainerCursorPosition","action","find","position","Array","isArray","Number","isNaN","xPercent","yPercent","Math","floor","ceil","currentPercent","getContainerVisibility","visibility","start","end","assignedSegment","round","scrolledAndPlayed","message","wrapper","this","Map","top","innerHeight","cursorX","cursorY","left","isLoaded","initScrollMode","_this2","initCursorMode","initChainMode","destroy","create","instance"],"version":3,"file":"index.afa6c2a3.js.map","sourceRoot":"/__parcel_source_root/"}